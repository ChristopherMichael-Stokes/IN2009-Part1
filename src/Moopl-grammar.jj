options {
  STATIC = false;
}

PARSER_BEGIN(MooplParser)
  import syntaxtree.*;
  import syntaxtree.interp.*;
  import java.util.List;
  import java.util.LinkedList;
  public class MooplParser {
  }
PARSER_END(MooplParser)

SKIP : /* Define white-space and comments here */
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
  | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
  | <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* Define the Moopl tokens here. */
{
//keyword
  < PROC: "proc" >
| < FUN: "fun" >
| < CLASS: "class" >
| < EXTENDS: "extends" >
| < RETURN: "return" >
| < BOOL: "boolean" >
| < TRUE: "true" >
| < FALSE: "false" >
| < SELF: "self" >
| < INT: "int" >
| < ARRAYOF: "arrayof" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < WHILE: "while" >
| < DO: "do" >
| < OUTPUT: "output" >
| < LENGTH: "length" >
| < NEW: "new" >
| < OBJECT: "object" >
| < ISNULL: "isnull" >
//punctuation
| < DOT: "." >
| < COMMA: "," >
| < EQUALS: "=" >
| < OPENSBR: "[" >
| < CLOSESBR: "]" >
| < OPENBRACE: "{" >
| < CLOSEBRACE: "}" >
| < OPENPAREN: "(" >
| < CLOSEPAREN: ")" >
| < ENDST: ";" >
| < NOT: "!" >

// LOTS OF TOKENS MISSING HERE!

| < OP: ("and"|"div"|"<"|"=="|"+"|"-"|"*") >
| < INTEGER_LITERAL: (["0"-"9"])+ >
| < ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >
}

/*
 * TOKEN tester
 */
public void testTokens() :
{
  Token t;
}
{
  ( ( ( t = <PROC>
      | t = <FUN>
      | t = <CLASS>
      | t = <OP>
      | t = <EXTENDS>
      | t = <RETURN>
      | t = <BOOL>
      | t = <TRUE>
      | t = <FALSE>
      | t = <SELF>
      | t = <INT>
      | t = <ARRAYOF>
      | t = <IF>
      | t = <THEN>
      | t = <ELSE>
      | t = <WHILE>
      | t = <DO>
      | t = <OUTPUT>
      | t = <LENGTH>
      | t = <NEW>
      | t = <OBJECT>
      | t = <ISNULL>
      | t = <DOT>
      | t = <COMMA>
      | t = <EQUALS>
      | t = <OPENSBR>
      | t = <CLOSESBR>
      | t = <OPENBRACE>
      | t = <CLOSEBRACE>
      | t = <OPENPAREN>
      | t = <CLOSEPAREN>
      | t = <ENDST>
      | t = <NOT>

        // ADD YOUR OWN TOKENS HERE AS YOU DEFINE EACH ONE
      )
      { System.out.println("Recognised as valid token: " + t.image); }
    )
  | ( t = <INTEGER_LITERAL>
      { System.out.println("Recognised as INTEGER_LITERAL: " + t.image); }
    )
  | ( t = <ID>
      { System.out.println("Recognised as ID: " + t.image); }
    )
  )*
}


/************************************
 * The Moopl grammar starts here *
 ************************************/


public void nt_Program() :
{}
{
  (nt_ProcDecl())+ (nt_ClassDecl())*
}

public void nt_ClassDecl() :
{}
{ 
  <CLASS> <ID> (<OPENBRACE> (nt_FieldDecl())* (nt_MethodDecl())* <CLOSEBRACE>
  | <EXTENDS> <ID> <OPENBRACE> (nt_FieldDecl())* (nt_MethodDecl())* <CLOSEBRACE>)
}

public void nt_MethodDecl() :
{}
{
  nt_ProcDecl() | nt_FunDecl()
}

public void nt_FunDecl() :
{}
{
  <FUN> nt_Type() <OPENPAREN> nt_FormalList() <CLOSEPAREN> <OPENBRACE>
  (nt_Statement())* <RETURN> nt_Exp() <ENDST> <CLOSEBRACE>
}

public void nt_ProcDecl() :
{}
{
  <PROC> <ID> <OPENPAREN> nt_FormalList() <CLOSEPAREN> <OPENBRACE>
  (nt_Statement())* <CLOSEBRACE>
}

public void nt_PrimaryExp() :
{}
{
  <INTEGER_LITERAL> 
| <TRUE>
| <FALSE>
| nt_Var()
| <SELF>
| LOOKAHEAD (2) 
  <NEW> <ARRAYOF> <OPENPAREN> nt_Type() <CLOSEPAREN> <OPENSBR> nt_Exp() <CLOSESBR>
| <NEW> <OBJECT> <ID> <OPENPAREN> nt_ExpList() <CLOSEPAREN>
| <NOT> nt_PrimaryExp()
| <ISNULL> nt_PrimaryExp()
| <OPENPAREN> nt_Exp() <CLOSEPAREN>

}

public void nt_FormalList() :
{}  
{
  (nt_Type() <ID> (nt_FormalRest())*)?
}

public void nt_FormalRest() :
{}
{
  <COMMA> nt_Type() <ID>
}

public void nt_Statement() :
{} 
{
  nt_Block()
| LOOKAHEAD (2) //type and var could both start with ID
  nt_Type() <ID> <ENDST>
| LOOKAHEAD (2) //primaryexp could start with ID, but won't have an EQUALS after
  nt_Var() <EQUALS> nt_Exp() <ENDST>
| nt_PrimaryExp() (<OPENSBR> nt_Exp() <CLOSESBR> <EQUALS> nt_Exp() <ENDST>
                  | <DOT> <ID> <OPENPAREN> nt_ExpList() <CLOSEPAREN>)
| <IF> <OPENPAREN> <THEN> nt_Block() <ELSE> nt_Block()
| <WHILE> <OPENPAREN> nt_Exp() <CLOSEPAREN> <DO> nt_Block()
| <OUTPUT> nt_Exp() <ENDST>
}

public void nt_Block() :
{} 
{
  <OPENBRACE> (nt_Statement())* <CLOSEBRACE>
}

public void nt_Exp() :
{} 
{
  nt_PrimaryExp() (<OP> nt_PrimaryExp() | nt_PrimaryExp() <OPENSBR> nt_Exp() <CLOSESBR>
    | LOOKAHEAD (2) <DOT> <LENGTH> | <DOT> <ID> <OPENBRACE> nt_ExpList() <CLOSEBRACE>)?
}

public void nt_Type() :
{}
{
  <ARRAYOF> <OPENPAREN> nt_Type() <CLOSEPAREN>
| <BOOL>
| <INT>
| <ID>
}

public void nt_FieldDecl() :
{}
{
  nt_Type() <ID> <ENDST>
}

public void nt_Var() :
{}
{
  <ID>
}

public void nt_ExpList() :
{}
{
  (nt_Exp() (nt_ExpRest())*)?
}

public void nt_ExpRest() :
{}
{
  <COMMA> nt_Exp()
}

public void eof() :
{}
{
  <EOF>
}
